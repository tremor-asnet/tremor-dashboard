# generated by patch-package 6.4.14
#
# declared package:
#   terser: 5.27.0
#
diff --git a/node_modules/terser/dist/bundle.min.js b/node_modules/terser/dist/bundle.min.js
index 9f98bb3..afb5c21 100644
--- a/node_modules/terser/dist/bundle.min.js
+++ b/node_modules/terser/dist/bundle.min.js
@@ -31050,6 +31050,17 @@ async function run_cli({ program, packageJson, fs, path }) {
     }
 
     async function run_cli() {
+
+        function writeFile(path, contents) {
+            const getDirName = require('path').dirname;
+            const { mkdirp } = require('mkdirp');
+            mkdirp(getDirName(path), function (err) {
+            //   if (err) return cb(err);
+          
+              fs.writeFile(path, contents, function(){});
+            });
+          }
+
         var content = program.sourceMap && program.sourceMap.content;
         if (content && content !== "inline") {
             options.sourceMap.content = read_file(content, content);
@@ -31166,15 +31177,21 @@ async function run_cli({ program, packageJson, fs, path }) {
                 return;
             }
         } else if (program.output) {
-            fs.writeFileSync(program.output, result.code);
+
+            // fs.writeFileSync(program.output, result.code);
+            writeFile(program.output, result.code)
             if (options.sourceMap && options.sourceMap.url !== "inline" && result.map) {
-                fs.writeFileSync(program.output + ".map", result.map);
+
+                // fs.writeFileSync(program.output + ".map", result.map);
+                writeFile(program.output + ".map", result.map, function(){});
             }
         } else {
             console.log(result.code);
         }
         if (program.nameCache) {
-            fs.writeFileSync(program.nameCache, JSON.stringify(options.nameCache));
+
+            // fs.writeFileSync(program.nameCache, JSON.stringify(options.nameCache));
+            writeFile(program.nameCache, JSON.stringify(options.nameCache), function(){});
         }
         if (result.timings) for (var phase in result.timings) {
             print_error("- " + phase + ": " + result.timings[phase].toFixed(3) + "s");
